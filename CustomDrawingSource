local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Helper function to get or create a ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- Base class for drawing objects
local DrawingObject = {}
DrawingObject.__index = DrawingObject

function DrawingObject.new()
    local self = setmetatable({}, DrawingObject)
    self.screenGui = getOrCreateScreenGui()  -- Reuse or create a ScreenGui
    return self
end

-- Set property and trigger an update
local function setPropertyAndUpdate(self, key, value)
    self[key] = value  -- Store the property
    if self.update then
        self:update(key)  -- Call the update function after a property is changed
    end
end

------------------------------------------------
-- Line class
------------------------------------------------
local Line = {}
Line.__index = Line

function Line.new()
    local self = setmetatable(DrawingObject.new(), Line)

    -- Create the frame for the line
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0
    self.frame.Parent = self.screenGui

    return self
end

function Line:update()
    if self.From and self.To then
        local deltaX = self.To.X - self.From.X
        local deltaY = self.To.Y - self.From.Y
        local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

        local midX = (self.From.X + self.To.X) / 2
        local midY = (self.From.Y + self.To.Y) / 2

        self.frame.Size = UDim2.new(0, distance, 0, self.Thickness or 1)
        self.frame.Position = UDim2.new(0, midX, 0, midY)
        self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))

        if self.Transparency then
            self.frame.BackgroundTransparency = self.Transparency
        end
    end
end

setmetatable(Line, {
    __newindex = function(self, key, value)
        setPropertyAndUpdate(self, key, value)
    end
})

------------------------------------------------
-- Circle class
------------------------------------------------
local Circle = {}
Circle.__index = Circle

function Circle.new()
    local self = setmetatable(DrawingObject.new(), Circle)

    -- Create a Frame to simulate the circle using UICorner
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0
    self.frame.Parent = self.screenGui

    -- Add UICorner to round the frame
    local corner = Instance.new("UICorner", self.frame)
    corner.CornerRadius = UDim.new(1, 0)

    return self
end

function Circle:update()
    if self.Radius and self.Position then
        self.frame.Size = UDim2.new(0, self.Radius * 2, 0, self.Radius * 2)
        self.frame.Position = UDim2.new(0, self.Position.X, 0, self.Position.Y)
    end
    if self.Transparency then
        self.frame.BackgroundTransparency = self.Transparency
    end
end

setmetatable(Circle, {
    __newindex = function(self, key, value)
        setPropertyAndUpdate(self, key, value)
    end
})

------------------------------------------------
-- CustomDrawing creation logic
------------------------------------------------
function CustomDrawing.new(drawType)
    if drawType == "Line" then
        return Line.new()
    elseif drawType == "Circle" then
        return Circle.new()
    else
        error("Invalid draw type: " .. tostring(drawType))
    end
end

return CustomDrawing
