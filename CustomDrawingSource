-- CustomDrawingModule.lua

-- Define the module
local CustomDrawingModule = {}
CustomDrawingModule.__index = CustomDrawingModule

-- Create or retrieve the CustomDrawingUI in CoreGui
local function ensureCustomDrawingUi()
    local coreGui = game:GetService("CoreGui")
    local customDrawingUi = coreGui:FindFirstChild("CustomDrawingUi")
    
    if not customDrawingUi then
        customDrawingUi = Instance.new("ScreenGui")
        customDrawingUi.Name = "CustomDrawingUi"
        customDrawingUi.IgnoreGuiInset = true
        customDrawingUi.Parent = coreGui
    end
    
    return customDrawingUi
end

-- Circle handler
local function createCircle()
    local circle = Drawing.new("Circle")
    return setmetatable({
        Radius = circle.Radius,
        Position = circle.Position,
        Transparency = circle.Transparency,
        Filled = circle.Filled,
        Color = circle.Color,
        Visible = circle.Visible,
        _circle = circle
    }, {
        __index = function(t, key)
            return t._circle[key]
        end,
        __newindex = function(t, key, value)
            if t._circle[key] ~= nil then
                t._circle[key] = value
            else
                warn("Invalid property for Circle: " .. tostring(key))
            end
        end
    })
end

-- Line handler
local function createLine()
    local line = Drawing.new("Line")
    return setmetatable({
        From = line.From,
        To = line.To,
        Thickness = line.Thickness,
        Transparency = line.Transparency,
        Color = line.Color,
        Visible = line.Visible,
        _line = line
    }, {
        __index = function(t, key)
            return t._line[key]
        end,
        __newindex = function(t, key, value)
            if t._line[key] ~= nil then
                t._line[key] = value
            else
                warn("Invalid property for Line: " .. tostring(key))
            end
        end
    })
end

-- Text handler
local function createText()
    local text = Drawing.new("Text")
    return setmetatable({
        Text = text.Text,
        Size = text.Size,
        Position = text.Position,
        Transparency = text.Transparency,
        Outline = text.Outline,
        OutlineColor = text.OutlineColor,
        Font = text.Font,
        Color = text.Color,
        Visible = text.Visible,
        _text = text
    }, {
        __index = function(t, key)
            return t._text[key]
        end,
        __newindex = function(t, key, value)
            if t._text[key] ~= nil then
                t._text[key] = value
            else
                warn("Invalid property for Text: " .. tostring(key))
            end
        end
    })
end

-- Square handler (Rectangle)
local function createSquare()
    local square = Drawing.new("Square")
    return setmetatable({
        Size = square.Size,
        Position = square.Position,
        Transparency = square.Transparency,
        Filled = square.Filled,
        Color = square.Color,
        Visible = square.Visible,
        _square = square
    }, {
        __index = function(t, key)
            return t._square[key]
        end,
        __newindex = function(t, key, value)
            if t._square[key] ~= nil then
                t._square[key] = value
            else
                warn("Invalid property for Square: " .. tostring(key))
            end
        end
    })
end

-- Triangle handler
local function createTriangle()
    local triangle = Drawing.new("Triangle")
    return setmetatable({
        PointA = triangle.PointA,
        PointB = triangle.PointB,
        PointC = triangle.PointC,
        Transparency = triangle.Transparency,
        Filled = triangle.Filled,
        Color = triangle.Color,
        Visible = triangle.Visible,
        _triangle = triangle
    }, {
        __index = function(t, key)
            return t._triangle[key]
        end,
        __newindex = function(t, key, value)
            if t._triangle[key] ~= nil then
                t._triangle[key] = value
            else
                warn("Invalid property for Triangle: " .. tostring(key))
            end
        end
    })
end

-- Factory method to create new drawable objects
function CustomDrawingModule.new(objectType)
    ensureCustomDrawingUi()
    
    if objectType == "Circle" then
        return createCircle()
    elseif objectType == "Line" then
        return createLine()
    elseif objectType == "Text" then
        return createText()
    elseif objectType == "Square" then
        return createSquare()
    elseif objectType == "Triangle" then
        return createTriangle()
    else
        error("Unknown object type: " .. tostring(objectType))
    end
end

return CustomDrawingModule
