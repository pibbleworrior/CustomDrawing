local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Helper function to get or create a ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- Line class
local Line = {}
Line.__index = Line

-- Constructor for Line
function Line.new()
    local self = setmetatable({}, Line)

    -- Get or create a ScreenGui for the line
    self.screenGui = getOrCreateScreenGui()

    -- Create the frame for the line
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0  -- No border
    self.frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red line for visibility
    self.frame.Parent = self.screenGui

    -- Default properties
    self.Thickness = 1
    self.Transparency = 0
    self.From = Vector2.new(0, 0)
    self.To = Vector2.new(100, 100)

    -- Initial line drawing
    self:update()

    return self
end

-- Update method to redraw the line when necessary
function Line:update()
    -- Calculate the difference between 'From' and 'To' points
    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

    -- Calculate the midpoint between 'From' and 'To'
    local midX = (self.From.X + self.To.X) / 2
    local midY = (self.From.Y + self.To.Y) / 2

    -- Update the frame (size, position, transparency, and rotation)
    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, midX, 0, midY)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency
end

-- Setter for 'From' property
function Line:setFrom(point)
    self.From = point
    self:update()  -- Trigger the update when 'From' changes
end

-- Setter for 'To' property
function Line:setTo(point)
    self.To = point
    self:update()  -- Trigger the update when 'To' changes
end

-- Setter for 'Thickness' property
function Line:setThickness(value)
    self.Thickness = value
    self:update()  -- Trigger the update when 'Thickness' changes
end

-- Setter for 'Transparency' property
function Line:setTransparency(value)
    self.Transparency = value
    self:update()  -- Trigger the update when 'Transparency' changes
end

-- Method to destroy the line (cleanup)
function Line:destroy()
    if self.frame then
        self.frame:Destroy()
    end
end

-- Add Line class to the CustomDrawing module
CustomDrawing.Line = Line

return CustomDrawing
