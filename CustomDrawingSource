local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Helper function to get or create a ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- Base class for drawing objects (common methods shared across shapes)
local DrawingObject = {}
DrawingObject.__index = DrawingObject

function DrawingObject.new()
    local self = setmetatable({}, DrawingObject)
    self.screenGui = getOrCreateScreenGui()  -- Reuse or create a ScreenGui
    return self
end

-- Line class (inherits from DrawingObject)
local Line = {}
Line.__index = Line

function Line.new()
    local self = setmetatable(DrawingObject.new(), Line)

    -- Create the frame for the line
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0
    self.frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red line for visibility
    self.frame.Parent = self.screenGui

    -- Default properties for the line
    self.Thickness = 1
    self.Transparency = 0
    self.From = Vector2.new(0, 0)
    self.To = Vector2.new(100, 100)

    self:update()
    return self
end

function Line:update()
    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

    local midX = (self.From.X + self.To.X) / 2
    local midY = (self.From.Y + self.To.Y) / 2

    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, midX, 0, midY)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency
end

function Line:setFrom(point)
    self.From = point
    self:update()
end

function Line:setTo(point)
    self.To = point
    self:update()
end

function Line:setThickness(value)
    self.Thickness = value
    self:update()
end

function Line:setTransparency(value)
    self.Transparency = value
    self:update()
end

function Line:destroy()
    if self.frame then
        self.frame:Destroy()
    end
end

-- Text class (inherits from DrawingObject)
local Text = {}
Text.__index = Text

-- Text constructor
function Text.new()
    local self = setmetatable(DrawingObject.new(), Text)

    -- Create the text label
    self.label = Instance.new("TextLabel")
    self.label.BackgroundTransparency = 1  -- No background
    self.label.TextStrokeTransparency = 1  -- Outline initially disabled
    self.label.Parent = self.screenGui

    -- Default properties
    self.Text = "Sample Text"
    self.Size = 24
    self.Transparency = 0
    self.Center = false
    self.Outline = false
    self.OutlineColor = Color3.new(0, 0, 0)  -- Default black outline
    self.Position = Vector2.new(100, 100)
    self.Font = Enum.Font.SourceSans

    self:update()

    return self
end

function Text:update()
    -- Update the text label properties
    self.label.Text = self.Text
    self.label.Font = self.Font
    self.label.TextSize = self.Size
    self.label.TextTransparency = self.Transparency
    self.label.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text by default
    self.label.TextStrokeTransparency = self.Outline and 0 or 1  -- Toggle outline
    self.label.TextStrokeColor3 = self.OutlineColor
    self.label.Size = UDim2.new(0, self.label.TextBounds.X, 0, self.label.TextBounds.Y)

    -- Position the text based on whether it's centered
    if self.Center then
        self.label.Position = UDim2.new(0, self.Position.X - self.label.TextBounds.X / 2, 0, self.Position.Y - self.label.TextBounds.Y / 2)
    else
        self.label.Position = UDim2.new(0, self.Position.X, 0, self.Position.Y)
    end
end

function Text:setText(value)
    self.Text = value
    self:update()
end

function Text:setSize(value)
    self.Size = value
    self:update()
end

function Text:setTransparency(value)
    self.Transparency = value
    self:update()
end

function Text:setCenter(value)
    self.Center = value
    self:update()
end

function Text:setOutline(value)
    self.Outline = value
    self:update()
end

function Text:setOutlineColor(value)
    self.OutlineColor = value
    self:update()
end

function Text:setPosition(value)
    self.Position = value
    self:update()
end

-- TextBounds is read-only, returning the size of the text label
function Text:getTextBounds()
    return self.label.TextBounds
end

function Text:setFont(value)
    self.Font = value
    self:update()
end

function Text:destroy()
    if self.label then
        self.label:Destroy()
    end
end

-- Add the Line and Text classes to the CustomDrawing module
CustomDrawing.Line = Line
CustomDrawing.Text = Text

return CustomDrawing
