local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Helper function to get or create a ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- Base class for drawing objects
local DrawingObject = {}
DrawingObject.__index = DrawingObject

function DrawingObject.new()
    local self = setmetatable({}, DrawingObject)
    self.screenGui = getOrCreateScreenGui()  -- Reuse or create a ScreenGui
    return self
end

------------------------------------------------
-- Line class (inherits from DrawingObject)
------------------------------------------------
local Line = {}
Line.__index = Line

function Line.new()
    local self = setmetatable(DrawingObject.new(), Line)

    -- Create the frame for the line
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0
    self.frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red line for visibility
    self.frame.Parent = self.screenGui

    -- No default properties. You must set all fields.
    self.Thickness = nil
    self.Transparency = nil
    self.From = nil
    self.To = nil

    return self
end

function Line:update()
    if not self.From or not self.To or not self.Thickness then return end -- Don't update unless necessary fields are set

    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

    local midX = (self.From.X + self.To.X) / 2
    local midY = (self.From.Y + self.To.Y) / 2

    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, midX, 0, midY)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency or 0
end

setmetatable(Line, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        self:update() -- Automatically update when a field changes
    end
})

------------------------------------------------
-- Text class (inherits from DrawingObject)
------------------------------------------------
local Text = {}
Text.__index = Text

function Text.new()
    local self = setmetatable(DrawingObject.new(), Text)

    -- Create the text label
    self.label = Instance.new("TextLabel")
    self.label.BackgroundTransparency = 1 -- No background
    self.label.Parent = self.screenGui

    -- No default properties. You must set all fields.
    self.Text = nil
    self.Size = nil
    self.Transparency = nil
    self.Center = nil
    self.Outline = nil
    self.OutlineColor = nil
    self.Position = nil
    self.Font = nil

    return self
end

function Text:update()
    if not self.Text or not self.Size or not self.Position then return end -- Don't update unless necessary fields are set

    self.label.Text = self.Text
    self.label.Font = self.Font or Enum.Font.SourceSans
    self.label.TextSize = self.Size
    self.label.TextTransparency = self.Transparency or 0
    self.label.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.label.TextStrokeTransparency = self.Outline and 0 or 1
    self.label.TextStrokeColor3 = self.OutlineColor or Color3.new(0, 0, 0)

    if self.Center then
        self.label.Position = UDim2.new(0, self.Position.X - self.label.TextBounds.X / 2, 0, self.Position.Y - self.label.TextBounds.Y / 2)
    else
        self.label.Position = UDim2.new(0, self.Position.X, 0, self.Position.Y)
    end
end

setmetatable(Text, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        self:update() -- Automatically update when a field changes
    end
})

------------------------------------------------
-- Circle class (inherits from DrawingObject)
------------------------------------------------
local Circle = {}
Circle.__index = Circle

function Circle.new()
    local self = setmetatable(DrawingObject.new(), Circle)

    -- Create a Frame to simulate the circle using UICorner
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0
    self.frame.Parent = self.screenGui

    -- Add UICorner to round the frame
    local corner = Instance.new("UICorner", self.frame)
    corner.CornerRadius = UDim.new(1, 0)

    -- No default properties. You must set all fields.
    self.Transparency = nil
    self.Thickness = nil
    self.Radius = nil
    self.Filled = nil
    self.Position = nil

    return self
end

function Circle:update()
    if not self.Radius or not self.Position then return end -- Don't update unless necessary fields are set

    self.frame.Size = UDim2.new(0, self.Radius * 2, 0, self.Radius * 2)
    self.frame.Position = UDim2.new(0, self.Position.X, 0, self.Position.Y)
    self.frame.BackgroundTransparency = self.Transparency or 0
    self.frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

    if not self.Filled then
        self.frame.BackgroundTransparency = 1
        self.frame.BorderSizePixel = self.Thickness or 1
        self.frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    else
        self.frame.BorderSizePixel = 0
    end
end

setmetatable(Circle, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        self:update() -- Automatically update when a field changes
    end
})

------------------------------------------------
-- CustomDrawing creation logic
------------------------------------------------
function CustomDrawing.new(drawType)
    if drawType == "Line" then
        return Line.new()
    elseif drawType == "Text" then
        return Text.new()
    elseif drawType == "Circle" then
        return Circle.new()
    else
        error("Invalid draw type: " .. tostring(drawType))
    end
end

return CustomDrawing
