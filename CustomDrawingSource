local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Debugging helper function
local function debugPrint(message)
    print("[CustomDrawing Debug]: " .. message)
end

------------------------------------------------
-- Line class (uses Drawing API with debugging)
------------------------------------------------
local Line = {}
Line.__index = Line

function Line.new()
    local self = setmetatable({}, Line)

    -- Create a new line using the Drawing API
    self.line = Drawing.new("Line")

    -- No default properties; they must be set by the user script
    self.Thickness = nil
    self.Transparency = nil
    self.From = nil
    self.To = nil
    self.Color = nil

    debugPrint("Created new Line object")

    return self
end

function Line:update()
    if not self.From or not self.To or not self.Thickness or not self.Color then 
        debugPrint("Missing essential fields to draw the line")
        return 
    end

    -- Update the line properties dynamically
    self.line.Thickness = self.Thickness
    self.line.Transparency = self.Transparency or 1
    self.line.From = self.From
    self.line.To = self.To
    self.line.Color = self.Color
    self.line.Visible = true

    debugPrint("Line updated: From " .. tostring(self.From) .. " To " .. tostring(self.To) .. " Thickness: " .. tostring(self.Thickness))
end

setmetatable(Line, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        debugPrint("Line property '" .. key .. "' updated to: " .. tostring(value))
        self:update() -- Automatically call update on every change
    end
})

------------------------------------------------
-- Circle class (uses Drawing API with debugging)
------------------------------------------------
local Circle = {}
Circle.__index = Circle

function Circle.new()
    local self = setmetatable({}, Circle)

    -- Create a new circle using the Drawing API
    self.circle = Drawing.new("Circle")

    -- No default properties; they must be set by the user script
    self.Thickness = nil
    self.Transparency = nil
    self.Radius = nil
    self.Filled = nil
    self.Position = nil
    self.Color = nil

    debugPrint("Created new Circle object")

    return self
end

function Circle:update()
    if not self.Radius or not self.Position or not self.Color then 
        debugPrint("Missing essential fields to draw the circle")
        return 
    end

    -- Update the circle properties dynamically
    self.circle.Thickness = self.Thickness
    self.circle.Transparency = self.Transparency or 1
    self.circle.Radius = self.Radius
    self.circle.Filled = self.Filled or false
    self.circle.Position = self.Position
    self.circle.Color = self.Color
    self.circle.Visible = true

    debugPrint("Circle updated: Position " .. tostring(self.Position) .. " Radius: " .. tostring(self.Radius))
end

setmetatable(Circle, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        debugPrint("Circle property '" .. key .. "' updated to: " .. tostring(value))
        self:update() -- Automatically call update on every change
    end
})

------------------------------------------------
-- Text class (uses Drawing API with debugging)
------------------------------------------------
local Text = {}
Text.__index = Text

function Text.new()
    local self = setmetatable({}, Text)

    -- Create a new text using the Drawing API
    self.text = Drawing.new("Text")

    -- No default properties; they must be set by the user script
    self.Text = nil
    self.Size = nil
    self.Transparency = nil
    self.Position = nil
    self.Color = nil
    self.Font = nil
    self.Center = nil

    debugPrint("Created new Text object")

    return self
end

function Text:update()
    if not self.Text or not self.Size or not self.Position or not self.Color then 
        debugPrint("Missing essential fields to display text")
        return 
    end

    -- Update the text properties dynamically
    self.text.Text = self.Text
    self.text.Size = self.Size
    self.text.Transparency = self.Transparency or 1
    self.text.Position = self.Position
    self.text.Color = self.Color
    self.text.Font = self.Font or 0
    self.text.Center = self.Center or false
    self.text.Visible = true

    debugPrint("Text updated: " .. self.Text .. " at Position " .. tostring(self.Position))
end

setmetatable(Text, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        debugPrint("Text property '" .. key .. "' updated to: " .. tostring(value))
        self:update() -- Automatically call update on every change
    end
})

------------------------------------------------
-- CustomDrawing creation logic with debugging
------------------------------------------------
function CustomDrawing.new(drawType)
    if drawType == "Line" then
        debugPrint("Creating new Line object")
        return Line.new()
    elseif drawType == "Text" then
        debugPrint("Creating new Text object")
        return Text.new()
    elseif drawType == "Circle" then
        debugPrint("Creating new Circle object")
        return Circle.new()
    else
        error("Invalid draw type: " .. tostring(drawType))
    end
end

return CustomDrawing
