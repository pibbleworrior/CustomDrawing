local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Helper function to get or create a ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- Base class for drawing objects
local DrawingObject = {}
DrawingObject.__index = DrawingObject

function DrawingObject.new()
    local self = setmetatable({}, DrawingObject)
    self.screenGui = getOrCreateScreenGui()  -- Reuse or create a ScreenGui
    return self
end

------------------------------------------------
-- Line class (inherits from DrawingObject)
------------------------------------------------
local Line = {}
Line.__index = Line

function Line.new()
    local self = setmetatable(DrawingObject.new(), Line)

    -- Create the frame for the line
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0
    self.frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red line for visibility
    self.frame.Parent = self.screenGui

    -- Default properties for the line
    self.Thickness = 1
    self.Transparency = 0
    self.From = Vector2.new(0, 0)
    self.To = Vector2.new(100, 100)

    -- Manually update after creation
    self:update()
    return self
end

function Line:update()
    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

    local midX = (self.From.X + self.To.X) / 2
    local midY = (self.From.Y + self.To.Y) / 2

    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, midX, 0, midY)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency
end

------------------------------------------------
-- CustomDrawing creation logic
------------------------------------------------
function CustomDrawing.new(drawType)
    if drawType == "Line" then
        return Line.new()
    else
        error("Invalid draw type: " .. tostring(drawType))
    end
end

return CustomDrawing
