local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

local RunService = game:GetService("RunService")

-- Frame interval to control how often the drawings update (every 2 frames, adjust as needed)
local MIN_UPDATE_FRAMES = 2

-- Global frame counter
local frameCounter = 0

-- Base class for drawing objects (common methods shared across shapes)
local DrawingObject = {}
DrawingObject.__index = DrawingObject

-- Helper function to get or create a ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- Common constructor for all drawing objects
function DrawingObject.new()
    local self = setmetatable({}, DrawingObject)
    
    -- Create or reuse a ScreenGui
    self.screenGui = getOrCreateScreenGui()
    
    -- Throttling and frame control
    self.lastUpdateFrame = 0  -- Keeps track of the last frame when the object was updated
    self.needsUpdate = false  -- Flag to track if an update is pending
    
    return self
end

-- Method to check if an object needs to update based on the frame interval
function DrawingObject:shouldUpdate()
    if frameCounter - self.lastUpdateFrame >= MIN_UPDATE_FRAMES then
        return true
    end
    return false
end

-- Base update method (to be overridden by specific shapes)
function DrawingObject:update()
    -- This will be overridden in the shape-specific classes
end

-- Method to destroy the drawing object
function DrawingObject:destroy()
    if self.frame then
        self.frame:Destroy()
    end
end

-- Line class (inherits from DrawingObject)
local Line = setmetatable({}, { __index = DrawingObject })

-- Constructor for Line
function Line.new()
    local self = DrawingObject.new()

    -- Create the frame for the line
    self.frame = Instance.new("Frame")
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.BorderSizePixel = 0  -- No border
    self.frame.Parent = self.screenGui

    -- Initialize properties for the line
    self.Thickness = 1
    self.Transparency = 0
    self.From = nil
    self.To = nil
    
    return self
end

-- Update method for Line (called every N frames based on shouldUpdate logic)
function Line:update()
    if not self:shouldUpdate() then
        return  -- Skip update if it's not time yet
    end

    -- Ensure that From and To are valid
    if not self.From or not self.To then
        warn("From or To is nil, skipping update.")
        return
    end

    -- Calculate the difference in X and Y coordinates
    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

    -- Calculate the midpoint between From and To
    local midX = (self.From.X + self.To.X) / 2
    local midY = (self.From.Y + self.To.Y) / 2

    -- Update the frame size, position, transparency, and rotation
    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, midX, 0, midY)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency

    -- Mark the last update frame
    self.lastUpdateFrame = frameCounter
end

-- Setters for Line properties
function Line:setFrom(point)
    self.From = point
    self.needsUpdate = true
end

function Line:setTo(point)
    self.To = point
    self.needsUpdate = true
end

function Line:setThickness(value)
    self.Thickness = value
    self.needsUpdate = true
end

function Line:setTransparency(value)
    self.Transparency = value
    self.needsUpdate = true
end

-- Extend the module to allow for more shapes in the future
CustomDrawing.Line = Line

-- Handle global frame counting and updating of all objects
RunService.Heartbeat:Connect(function()
    frameCounter = frameCounter + 1

    -- Example: If we had a list of objects to update, we could iterate through them
    -- For now, you can manually call update on individual objects
end)

return CustomDrawing
