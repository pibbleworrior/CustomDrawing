-- CustomDrawingModule.lua

-- Define the module
local CustomDrawingModule = {}
CustomDrawingModule.__index = CustomDrawingModule

-- Create or retrieve the CustomDrawingUI in CoreGui
local function ensureCustomDrawingUi()
    local coreGui = game:GetService("CoreGui")
    local customDrawingUi = coreGui:FindFirstChild("CustomDrawingUi")
    
    if not customDrawingUi then
        customDrawingUi = Instance.new("ScreenGui")
        customDrawingUi.Name = "CustomDrawingUi"
        customDrawingUi.IgnoreGuiInset = true
        customDrawingUi.Parent = coreGui
    end
    
    return customDrawingUi
end

-- Helper function to safely set properties, ensuring valid types
local function safeSet(instance, property, value)
    if instance and instance[property] ~= nil and value ~= nil then
        -- Type check for each specific property type
        if property == "Position" or property == "From" or property == "To" or property == "PointA" or property == "PointB" or property == "PointC" then
            if typeof(value) == "Vector2" then
                instance[property] = value
            else
                warn(property .. " expects a Vector2 value")
            end
        elseif property == "Radius" or property == "Size" or property == "Thickness" or property == "Transparency" then
            if type(value) == "number" then
                instance[property] = value
            else
                warn(property .. " expects a number value")
            end
        elseif property == "Filled" or property == "Outline" then
            if type(value) == "boolean" then
                instance[property] = value
            else
                warn(property .. " expects a boolean value")
            end
        elseif property == "Color" or property == "OutlineColor" then
            if typeof(value) == "Color3" then
                instance[property] = value
            else
                warn(property .. " expects a Color3 value")
            end
        elseif property == "Text" or property == "Font" then
            instance[property] = value -- Handle Text and Enum.Font (no strict check)
        else
            -- For any other property that might exist, assign it safely
            instance[property] = value
        end
    else
        warn("Invalid property or value: " .. tostring(property))
    end
end

-- Base class for drawable objects
local DrawableObject = {}
DrawableObject.__index = DrawableObject

function DrawableObject.new(objectType)
    local self = setmetatable({}, DrawableObject)
    self.objectType = objectType
    self.instance = Drawing.new(objectType)
    return self
end

function DrawableObject:Set(property, value)
    safeSet(self.instance, property, value)
end

function DrawableObject:Destroy()
    if self.instance then
        self.instance:Remove()
        self.instance = nil
    end
end

-- Circle class
local Circle = setmetatable({}, DrawableObject)
Circle.__index = Circle

function Circle.new()
    local self = DrawableObject.new("Circle")
    setmetatable(self, Circle)
    -- Set default values
    safeSet(self.instance, "Radius", 50)
    safeSet(self.instance, "Position", Vector2.new(0, 0))
    return self
end

-- Line class
local Line = setmetatable({}, DrawableObject)
Line.__index = Line

function Line.new()
    local self = DrawableObject.new("Line")
    setmetatable(self, Line)
    -- Set default values
    safeSet(self.instance, "From", Vector2.new(0, 0))
    safeSet(self.instance, "To", Vector2.new(100, 100))
    return self
end

-- Text class
local Text = setmetatable({}, DrawableObject)
Text.__index = Text

function Text.new()
    local self = DrawableObject.new("Text")
    setmetatable(self, Text)
    -- Set default values
    safeSet(self.instance, "Text", "Default Text")
    safeSet(self.instance, "Size", 20)
    safeSet(self.instance, "Position", Vector2.new(0, 0))
    safeSet(self.instance, "Color", Color3.fromRGB(255, 255, 255)) -- Ensure the text has a visible color
    return self
end

-- Square class (handled as a rectangle)
local Square = setmetatable({}, DrawableObject)
Square.__index = Square

function Square.new()
    local self = DrawableObject.new("Square")
    setmetatable(self, Square)
    -- Set default values
    safeSet(self.instance, "Size", Vector2.new(100, 100))
    safeSet(self.instance, "Position", Vector2.new(0, 0))
    return self
end

-- Triangle class
local Triangle = setmetatable({}, DrawableObject)
Triangle.__index = Triangle

function Triangle.new()
    local self = DrawableObject.new("Triangle")
    setmetatable(self, Triangle)
    -- Set default values
    safeSet(self.instance, "PointA", Vector2.new(0, 0))
    safeSet(self.instance, "PointB", Vector2.new(100, 100))
    safeSet(self.instance, "PointC", Vector2.new(50, 50))
    return self
end

-- Factory method to create new drawable objects
function CustomDrawingModule.new(objectType)
    ensureCustomDrawingUi()
    
    if objectType == "Circle" then
        return Circle.new()
    elseif objectType == "Line" then
        return Line.new()
    elseif objectType == "Text" then
        return Text.new()
    elseif objectType == "Square" then
        return Square.new()
    elseif objectType == "Triangle" then
        return Triangle.new()
    else
        error("Unknown object type: " .. tostring(objectType))
    end
end

return CustomDrawingModule
