-- CustomDrawingModule.lua

-- Define the module
local CustomDrawingModule = {}
CustomDrawingModule.__index = CustomDrawingModule

-- Ensure CustomDrawingUi exists
local function ensureCustomDrawingUi()
    local coreGui = game:GetService("CoreGui")
    local customDrawingUi = coreGui:FindFirstChild("CustomDrawingUi")
    
    if not customDrawingUi then
        customDrawingUi = Instance.new("ScreenGui")
        customDrawingUi.Name = "CustomDrawingUi"
        customDrawingUi.IgnoreGuiInset = true
        customDrawingUi.Parent = coreGui
    end
    
    return customDrawingUi
end

-- Base object class
local BaseObject = {}
BaseObject.__index = BaseObject

function BaseObject:new(name, parent)
    local self = setmetatable({}, BaseObject)
    self.name = name
    self.parent = parent
    return self
end

-- Circle class
local Circle = setmetatable({}, BaseObject)
Circle.__index = Circle

function Circle.new()
    local gui = ensureCustomDrawingUi()
    local self = setmetatable(BaseObject:new("Circle", gui), Circle)

    -- Create the UI representation for the circle using Frame + UICorner
    self.frame = Instance.new("Frame")
    self.frame.Name = "Circle"
    self.frame.BackgroundColor3 = Color3.new(1, 1, 1)
    self.frame.BackgroundTransparency = 1 -- Default to transparent
    self.frame.BorderSizePixel = 0
    self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
    self.frame.Parent = gui

    -- Add UICorner for circular appearance
    self.corner = Instance.new("UICorner", self.frame)
    self.corner.CornerRadius = UDim.new(1, 0) -- 50% corner rounding

    -- Add UIStroke for non-filled circle outline
    self.stroke = Instance.new("UIStroke", self.frame)
    self.stroke.Thickness = 2
    self.stroke.Color = Color3.new(1, 1, 1) -- White outline

    -- Default properties
    self.size = 50 -- Default radius
    self.position = Vector2.new(100, 100) -- Default position
    self.transparency = 0
    self.filled = false

    self:updateVisual()
    return self
end

function Circle:updateVisual()
    -- Apply the radius (size)
    self.frame.Size = UDim2.new(0, self.size * 2, 0, self.size * 2) -- Double radius for diameter
    -- Apply the position
    self.frame.Position = UDim2.new(0, self.position.X, 0, self.position.Y)
    -- Apply the transparency
    self.frame.BackgroundTransparency = self.transparency

    -- Handle filled vs outline
    if self.filled then
        self.frame.BackgroundTransparency = 0
        self.stroke.Enabled = false -- Disable stroke for filled circle
    else
        self.frame.BackgroundTransparency = 1
        self.stroke.Enabled = true -- Enable stroke for outline
    end
end

function Circle:Set(property, value)
    if property == "Radius" then
        self.size = value -- Radius is half of the size
    elseif property == "Position" then
        self.position = value
    elseif property == "Transparency" then
        self.transparency = value
    elseif property == "Filled" then
        self.filled = value
    end
    self:updateVisual() -- Apply updates
end

-- Line class
local Line = setmetatable({}, BaseObject)
Line.__index = Line

function Line.new()
    local gui = ensureCustomDrawingUi()
    local self = setmetatable(BaseObject:new("Line", gui), Line)

    -- Create a Frame to represent the line
    self.frame = Instance.new("Frame")
    self.frame.Name = "Line"
    self.frame.BackgroundColor3 = Color3.new(1, 1, 1)
    self.frame.BorderSizePixel = 0
    self.frame.Parent = gui

    self.from = Vector2.new(100, 100)
    self.to = Vector2.new(200, 200)
    self.thickness = 2

    self:updateVisual()
    return self
end

function Line:updateVisual()
    local deltaX = self.to.X - self.from.X
    local deltaY = self.to.Y - self.from.Y
    local length = math.sqrt(deltaX * deltaX + deltaY * deltaY)
    local angle = math.atan2(deltaY, deltaX)

    self.frame.Size = UDim2.new(0, length, 0, self.thickness)
    self.frame.Position = UDim2.new(0, self.from.X, 0, self.from.Y)
    self.frame.Rotation = math.deg(angle)
end

function Line:Set(property, value)
    if property == "From" then
        self.from = value
    elseif property == "To" then
        self.to = value
    elseif property == "Thickness" then
        self.thickness = value
    end
    self:updateVisual() -- Apply updates
end

-- Text class
local Text = setmetatable({}, BaseObject)
Text.__index = Text

function Text.new()
    local gui = ensureCustomDrawingUi()
    local self = setmetatable(BaseObject:new("Text", gui), Text)

    -- Create a TextLabel for the text object
    self.textLabel = Instance.new("TextLabel")
    self.textLabel.Name = "Text"
    self.textLabel.BackgroundTransparency = 1
    self.textLabel.TextColor3 = Color3.new(1, 1, 1)
    self.textLabel.Size = UDim2.new(0, 100, 0, 50)
    self.textLabel.Parent = gui

    self.text = "Default Text"
    self.size = 14
    self.position = Vector2.new(100, 100)

    self:updateVisual()
    return self
end

function Text:updateVisual()
    self.textLabel.Text = self.text
    self.textLabel.Size = UDim2.new(0, self.size * 10, 0, self.size) -- Approximate size
    self.textLabel.Position = UDim2.new(0, self.position.X, 0, self.position.Y)
end

function Text:Set(property, value)
    if property == "Text" then
        self.text = value
    elseif property == "Size" then
        self.size = value
    elseif property == "Position" then
        self.position = value
    end
    self:updateVisual() -- Apply updates
end

-- Factory method to create new drawable objects
function CustomDrawingModule.new(objectType)
    ensureCustomDrawingUi()

    if objectType == "Circle" then
        return Circle.new()
    elseif objectType == "Line" then
        return Line.new()
    elseif objectType == "Text" then
        return Text.new()
    else
        error("Unknown object type: " .. tostring(objectType))
    end
end

return CustomDrawingModule
