-- CustomDrawing Module
local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- The available types for drawing (we can add more later)
local drawingTypes = {
    ["Line"] = true,
}

-- Function to create or use an existing CustomDrawingGui in CoreGui
local function getOrCreateCustomDrawingGui()
    local coreGui = game:GetService("CoreGui")
    
    -- Check if the GUI already exists
    local existingGui = coreGui:FindFirstChild("CustomDrawingGui")
    if existingGui then
        return existingGui
    end
    
    -- Create the GUI if it doesn't exist
    local newGui = Instance.new("ScreenGui")
    newGui.Name = "CustomDrawingGui"
    newGui.ResetOnSpawn = false
    newGui.Parent = coreGui
    return newGui
end

-- A constructor method for creating new drawing objects
function CustomDrawing.new(drawingType)
    -- Ensure the drawing type is valid
    if not drawingTypes[drawingType] then
        error("Unsupported drawing type: " .. tostring(drawingType))
    end
    
    local self = setmetatable({}, CustomDrawing)
    
    -- Use or create the CustomDrawingGui within CoreGui
    local drawingGui = getOrCreateCustomDrawingGui()

    -- Create a frame for the Line if we are using UI elements
    if drawingType == "Line" then
        self.frame = Instance.new("Frame")
        self.frame.AnchorPoint = Vector2.new(0.5, 0.5) -- Make sure the line is positioned correctly
        self.frame.BorderSizePixel = 0
        self.frame.BackgroundColor3 = Color3.new(1, 1, 1) -- Default color white (can change later)
        self.frame.Parent = drawingGui
        self.Object = self.frame
        
        -- Default properties for a Line
        self.From = Vector2.new(0, 0)
        self.To = Vector2.new(0, 0)
        self.Thickness = 1
        self.Transparency = 1
        self.Color = Color3.new(1, 1, 1)
    end

    return self
end

-- Method to update the line's size, position, and rotation
function CustomDrawing:UpdateLine()
    -- Calculate delta for the position difference
    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)

    -- Calculate the midpoint of the line for positioning
    local midX = (self.From.X + self.To.X) / 2
    local midY = (self.From.Y + self.To.Y) / 2

    -- Set size, position, and rotation for the line
    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, midX, 0, midY)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency
    self.frame.BackgroundColor3 = self.Color
end

-- Custom property setters, dynamically update the Drawing object
function CustomDrawing:Set(property, value)
    if self[property] ~= nil then
        self[property] = value
        -- If it's a property affecting the line's appearance, update the line
        if property == "From" or property == "To" or property == "Thickness" or property == "Transparency" or property == "Color" then
            self:UpdateLine()
        end
    else
        error("Invalid property or value: " .. tostring(property))
    end
end

-- Auto-update mechanism for when you change the properties
function CustomDrawing.__newindex(t, k, v)
    if k == "From" or k == "To" or k == "Thickness" or k == "Transparency" or k == "Color" then
        t:Set(k, v)
    else
        rawset(t, k, v)
    end
end

return CustomDrawing
