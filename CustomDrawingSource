-- CustomDrawingModule.lua

-- Define the module
local CustomDrawingModule = {}
CustomDrawingModule.__index = CustomDrawingModule

-- Create or retrieve the CustomDrawingUI in CoreGui
local function ensureCustomDrawingUi()
    local coreGui = game:GetService("CoreGui")
    local customDrawingUi = coreGui:FindFirstChild("CustomDrawingUi")
    
    if not customDrawingUi then
        customDrawingUi = Instance.new("ScreenGui")
        customDrawingUi.Name = "CustomDrawingUi"
        customDrawingUi.IgnoreGuiInset = true
        customDrawingUi.Parent = coreGui
    end
    
    return customDrawingUi
end

-- Base class for drawable objects
local DrawableObject = {}
DrawableObject.__index = DrawableObject

function DrawableObject.new(objectType)
    local self = setmetatable({}, DrawableObject)
    self.objectType = objectType
    self.instance = Drawing.new(objectType)
    return self
end

function DrawableObject:Set(property, value)
    if self.instance[property] ~= nil then
        self.instance[property] = value
    else
        warn("Invalid property: " .. property)
    end
end

function DrawableObject:Destroy()
    self.instance:Remove()
end

-- Circle class
local Circle = setmetatable({}, DrawableObject)
Circle.__index = Circle

function Circle.new()
    local self = DrawableObject.new("Circle")
    setmetatable(self, Circle)
    self.instance.Radius = 50 -- Default radius
    self.instance.Position = Vector2.new(0, 0)
    return self
end

-- Line class
local Line = setmetatable({}, DrawableObject)
Line.__index = Line

function Line.new()
    local self = DrawableObject.new("Line")
    setmetatable(self, Line)
    self.instance.From = Vector2.new(0, 0)
    self.instance.To = Vector2.new(100, 100)
    return self
end

-- Text class
local Text = setmetatable({}, DrawableObject)
Text.__index = Text

function Text.new()
    local self = DrawableObject.new("Text")
    setmetatable(self, Text)
    self.instance.Text = "Default Text"
    self.instance.Size = 20 -- Default size
    self.instance.Position = Vector2.new(0, 0)
    return self
end

-- Square class (using "Square" as Rectangle in Drawing API)
local Square = setmetatable({}, DrawableObject)
Square.__index = Square

function Square.new()
    local self = DrawableObject.new("Square")
    setmetatable(self, Square)
    self.instance.Size = Vector2.new(100, 100)
    self.instance.Position = Vector2.new(0, 0)
    return self
end

-- Triangle class
local Triangle = setmetatable({}, DrawableObject)
Triangle.__index = Triangle

function Triangle.new()
    local self = DrawableObject.new("Triangle")
    setmetatable(self, Triangle)
    self.instance.PointA = Vector2.new(0, 0)
    self.instance.PointB = Vector2.new(100, 100)
    self.instance.PointC = Vector2.new(50, 50)
    return self
end

-- Factory method to create new drawable objects
function CustomDrawingModule.new(objectType)
    ensureCustomDrawingUi()
    
    if objectType == "Circle" then
        return Circle.new()
    elseif objectType == "Line" then
        return Line.new()
    elseif objectType == "Text" then
        return Text.new()
    elseif objectType == "Square" then
        return Square.new()
    elseif objectType == "Triangle" then
        return Triangle.new()
    else
        error("Unknown object type: " .. tostring(objectType))
    end
end

return CustomDrawingModule
