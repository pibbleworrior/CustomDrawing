local CustomDrawing = {}
CustomDrawing.__index = CustomDrawing

-- Function to create or get an existing ScreenGui in CoreGui
local function getOrCreateScreenGui()
    local CoreGui = game:GetService("CoreGui")
    local existingGui = CoreGui:FindFirstChild("CustomDrawingGui")
    
    if existingGui then
        return existingGui -- Reuse existing ScreenGui
    else
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomDrawingGui"
        screenGui.Parent = CoreGui
        return screenGui
    end
end

-- CustomDrawing.new("Line") to create a new line
function CustomDrawing.new(type)
    local self = setmetatable({}, CustomDrawing)
    
    -- Create or reuse a ScreenGui
    self.screenGui = getOrCreateScreenGui()
    
    -- Create a frame to represent the line
    if type == "Line" then
        self.frame = Instance.new("Frame")
        self.frame.AnchorPoint = Vector2.new(0.5, 0.5)
        self.frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)  -- Red color for visibility
        self.frame.BorderSizePixel = 0  -- No border
        self.frame.Parent = self.screenGui

        -- Initialize default properties
        self.Thickness = 1
        self.Transparency = 0
        self.From = Vector2.new(0, 0)
        self.To = Vector2.new(100, 100)
        
        self:updateLine()
    else
        error("Unsupported drawing type: " .. tostring(type))
    end
    
    return self
end

-- Function to update the line's visual properties
function CustomDrawing:updateLine()
    local deltaX = self.To.X - self.From.X
    local deltaY = self.To.Y - self.From.Y
    local distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)
    
    self.frame.Size = UDim2.new(0, distance, 0, self.Thickness)
    self.frame.Position = UDim2.new(0, (self.From.X + self.To.X) / 2, 0, (self.From.Y + self.To.Y) / 2)
    self.frame.Rotation = math.deg(math.atan2(deltaY, deltaX))
    self.frame.BackgroundTransparency = self.Transparency
end

-- Setters to dynamically update properties
function CustomDrawing:setFrom(point)
    self.From = point
    self:updateLine()
end

function CustomDrawing:setTo(point)
    self.To = point
    self:updateLine()
end

function CustomDrawing:setThickness(value)
    self.Thickness = value
    self:updateLine()
end

function CustomDrawing:setTransparency(value)
    self.Transparency = value
    self:updateLine()
end

-- Function to destroy the drawing
function CustomDrawing:destroy()
    if self.frame then
        self.frame:Destroy()
    end
end

return CustomDrawing
