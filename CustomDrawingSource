-- CustomDrawingModule.lua

-- Define the module
local CustomDrawingModule = {}
CustomDrawingModule.__index = CustomDrawingModule

-- Create or retrieve the CustomDrawingUI in CoreGui
local function ensureCustomDrawingUi()
    local coreGui = game:GetService("CoreGui")
    local customDrawingUi = coreGui:FindFirstChild("CustomDrawingUi")
    
    if not customDrawingUi then
        customDrawingUi = Instance.new("ScreenGui")
        customDrawingUi.Name = "CustomDrawingUi"
        customDrawingUi.IgnoreGuiInset = true
        customDrawingUi.Parent = coreGui
    end
    
    return customDrawingUi
end

-- Circle handler
local function createCircle()
    local circle = Drawing.new("Circle")
    return setmetatable({}, {
        __index = function(_, key)
            return circle[key]
        end,
        __newindex = function(_, key, value)
            if circle[key] ~= nil then
                circle[key] = value
            else
                warn("Invalid property for Circle: " .. tostring(key))
            end
        end,
        __tostring = function()
            return "Circle"
        end
    })
end

-- Line handler
local function createLine()
    local line = Drawing.new("Line")
    return setmetatable({}, {
        __index = function(_, key)
            return line[key]
        end,
        __newindex = function(_, key, value)
            if line[key] ~= nil then
                line[key] = value
            else
                warn("Invalid property for Line: " .. tostring(key))
            end
        end,
        __tostring = function()
            return "Line"
        end
    })
end

-- Text handler
local function createText()
    local text = Drawing.new("Text")
    return setmetatable({}, {
        __index = function(_, key)
            return text[key]
        end,
        __newindex = function(_, key, value)
            if text[key] ~= nil then
                text[key] = value
            else
                warn("Invalid property for Text: " .. tostring(key))
            end
        end,
        __tostring = function()
            return "Text"
        end
    })
end

-- Square handler (Rectangle)
local function createSquare()
    local square = Drawing.new("Square")
    return setmetatable({}, {
        __index = function(_, key)
            return square[key]
        end,
        __newindex = function(_, key, value)
            if square[key] ~= nil then
                square[key] = value
            else
                warn("Invalid property for Square: " .. tostring(key))
            end
        end,
        __tostring = function()
            return "Square"
        end
    })
end

-- Triangle handler
local function createTriangle()
    local triangle = Drawing.new("Triangle")
    return setmetatable({}, {
        __index = function(_, key)
            return triangle[key]
        end,
        __newindex = function(_, key, value)
            if triangle[key] ~= nil then
                triangle[key] = value
            else
                warn("Invalid property for Triangle: " .. tostring(key))
            end
        end,
        __tostring = function()
            return "Triangle"
        end
    })
end

-- Factory method to create new drawable objects
function CustomDrawingModule.new(objectType)
    ensureCustomDrawingUi()
    
    if objectType == "Circle" then
        return createCircle()
    elseif objectType == "Line" then
        return createLine()
    elseif objectType == "Text" then
        return createText()
    elseif objectType == "Square" then
        return createSquare()
    elseif objectType == "Triangle" then
        return createTriangle()
    else
        error("Unknown object type: " .. tostring(objectType))
    end
end

return CustomDrawingModule
